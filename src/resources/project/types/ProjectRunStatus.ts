/**
 * This file auto-generated by Fern from our API Definition.
 */

export interface ProjectRunStatus<RawValue extends ProjectRunStatus.RawValue = ProjectRunStatus.RawValue> {
  value: RawValue;
  visit: <Result>(visitor: ProjectRunStatus._Visitor<Result>) => Result;
}

const _Pending: ProjectRunStatus<"PENDING"> = {
  value: "PENDING",
  visit: (visitor) => visitor.pending(),
};
const _Running: ProjectRunStatus<"RUNNING"> = {
  value: "RUNNING",
  visit: (visitor) => visitor.running(),
};
const _Errored: ProjectRunStatus<"ERRORED"> = {
  value: "ERRORED",
  visit: (visitor) => visitor.errored(),
};
const _Completed: ProjectRunStatus<"COMPLETED"> = {
  value: "COMPLETED",
  visit: (visitor) => visitor.completed(),
};
const _Killed: ProjectRunStatus<"KILLED"> = {
  value: "KILLED",
  visit: (visitor) => visitor.killed(),
};
const _UnableToAllocateKernel: ProjectRunStatus<"UNABLE_TO_ALLOCATE_KERNEL"> = {
  value: "UNABLE_TO_ALLOCATE_KERNEL",
  visit: (visitor) => visitor.unableToAllocateKernel(),
};
export const ProjectRunStatus = {
  Pending: _Pending,
  Running: _Running,
  Errored: _Errored,
  Completed: _Completed,
  Killed: _Killed,
  UnableToAllocateKernel: _UnableToAllocateKernel,
  _parse: (value: string): ProjectRunStatus => {
    switch (value) {
      case "PENDING": {
        return _Pending;
      }
      case "RUNNING": {
        return _Running;
      }
      case "ERRORED": {
        return _Errored;
      }
      case "COMPLETED": {
        return _Completed;
      }
      case "KILLED": {
        return _Killed;
      }
      case "UNABLE_TO_ALLOCATE_KERNEL": {
        return _UnableToAllocateKernel;
      }
      default: {
        return {
          value: value as ProjectRunStatus.RawValue,
          visit: (visitor) => visitor._other(value),
        };
      }
    }
  },
} as const;

export declare namespace ProjectRunStatus {
  type RawValue = "PENDING" | "RUNNING" | "ERRORED" | "COMPLETED" | "KILLED" | "UNABLE_TO_ALLOCATE_KERNEL";

  interface _Visitor<Result> {
    pending: () => Result;
    running: () => Result;
    errored: () => Result;
    completed: () => Result;
    killed: () => Result;
    unableToAllocateKernel: () => Result;
    _other: (value: string) => Result;
  }
}
